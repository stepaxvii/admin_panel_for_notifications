[project]
name = "aiogram_bot_template"
version = "1.0"
description = "Aiogram 3.x bot template using PostgreSQL (asyncpg) with SQLAlchemy + alembic"
authors = [
    {name = "wakaree", email = "nullmatawasoradesu@gmail.com"}
]
readme = "README.md"
license = "MIT"
requires-python = ">=3.12,<3.13"
dependencies = [
    "aiogram>=3.7.0",
    "aiogram-i18n>=1.0.0",
    "fluent-runtime>=0.2.0",
    "fastapi>=0.115.12",
    "sqlalchemy>=2.0.29",
    "asyncpg>=0.30.0",
    "alembic>=1.14.1",
    "redis>=5.2.1",
    "uvicorn[standard]>=0.34.2",
    "python-dotenv>=1.0.1",
    "pydantic>=2.10.6",
    "starlette-admin>=0.15.1",
    "httpx>=0.27.0",
    "loguru>=0.7.2",
    "elasticsearch>=8.13.0",
    "python-json-logger>=2.0.7",
    "structlog>=24.1.0",
    "babel>=2.14.0",
    "pydantic-settings>=2.2.1",
    "aiogram-contrib>=1.1.4",
    "msgspec>=0.18.6"
]

[project.urls]
Repository = "https://github.com/wakaree/aiogram_bot_template.git"

# Конфигурация uv для управления зависимостями
[tool.uv]
dev-dependencies = [
    "ftl-extract>=0.8.0",
    "mypy>=1.14.1",
    "ruff>=0.8.6",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.0",
    "httpx>=0.27.0",
    "faker>=25.0.0",
    "factory-boy>=3.3.0",
    "pytest-docker>=2.0.0",
    "pytest-env>=1.1.0",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "-v",
    "--tb=short",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "docker: Tests requiring Docker",
    "db: Tests requiring database",
    "redis: Tests requiring Redis",
    "elasticsearch: Tests requiring Elasticsearch",
]
asyncio_mode = "auto"

# Конфигурация форматирования кода
[tool.black]
line-length = 99
exclude = "\\.?venv|\\.?tests"

# Конфигурация линтера
[tool.ruff]
target-version = "py38"
line-length = 99
lint.select = [
    "C",    # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "N",    # pep8-naming
    "PLC",  # pylint conventions
    "PLE",  # pylint errors
    "Q",    # flake8-quotes
    "T",    # flake8-tidy-imports
    "W",    # pycodestyle warnings
    "YTT",  # flake8-2020
]
lint.ignore = ["N805"]
exclude = [
    ".venv",
    ".idea",
]

# Конфигурация проверки типов
[tool.mypy]
plugins = [
    "sqlalchemy.ext.mypy.plugin",
    "pydantic.mypy"
]
exclude = [
    "venv",
    ".venv",
    ".idea",
    ".tests",
]
warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true
extra_checks = true

# Специальные настройки для обработчиков Telegram
[[tool.mypy.overrides]]
module = ["app.telegram.handlers.*"]
strict_optional = false
warn_return_any = false
disable_error_code = ["union-attr"]

[tool.setuptools]
packages = { find = { include = ["app*"], exclude = ["tests*", "migrations*", "docker*", "logs*", "assets*", "scripts*"] } }
