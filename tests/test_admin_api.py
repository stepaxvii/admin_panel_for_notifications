"""
–¢–µ—Å—Ç—ã –¥–ª—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.
"""

import pytest
from fastapi.testclient import TestClient

from tests.test_admin_app import test_app


class TestAdminAPI:
    """–¢–µ—Å—Ç—ã –¥–ª—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏."""
    
    @pytest.fixture
    def client(self) -> TestClient:
        """–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è API."""
        return TestClient(test_app)
    
    def test_healthcheck_endpoint(self, client: TestClient):
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è."""
        response = client.get("/healthcheck")
        assert response.status_code == 200
        
        data = response.json()
        assert "status" in data
        assert data["status"] == "ok"
    
    def test_send_notification_endpoint(self, client: TestClient):
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        notification_data = {
            "text": "Test notification via API",
            "comment": "Test comment",
            "user_ids": [123456789, 987654321]
        }
        
        response = client.post("/api/notifications/send", json=notification_data)
        assert response.status_code == 200
        
        data = response.json()
        assert "sent" in data
        assert "errors" in data
        assert data["sent"] == 2
    
    def test_invalid_notification_data(self, client: TestClient):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        invalid_data = {
            "text": "",  # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            "comment": "Test comment"
        }
        
        response = client.post("/api/notifications/send", json=invalid_data)
        assert response.status_code == 400
        assert "detail" in response.json()
    
    def test_notification_without_user_ids(self, client: TestClient):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        notification_data = {
            "text": "Test notification without user IDs",
            "comment": "Test comment"
        }
        
        response = client.post("/api/notifications/send", json=notification_data)
        assert response.status_code == 200
        data = response.json()
        assert data["sent"] == 0
    
    def test_notification_with_empty_user_ids(self, client: TestClient):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        notification_data = {
            "text": "Test notification with empty user IDs",
            "comment": "Test comment",
            "user_ids": []
        }
        
        response = client.post("/api/notifications/send", json=notification_data)
        assert response.status_code == 200
        data = response.json()
        assert data["sent"] == 0
    
    def test_notification_missing_text(self, client: TestClient):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞."""
        notification_data = {
            "comment": "Test comment",
            "user_ids": [123456789]
        }
        
        response = client.post("/api/notifications/send", json=notification_data)
        assert response.status_code == 400
        assert "detail" in response.json()
    
    def test_notification_missing_comment(self, client: TestClient):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."""
        notification_data = {
            "text": "Test notification without comment",
            "user_ids": [123456789]
        }
        
        response = client.post("/api/notifications/send", json=notification_data)
        assert response.status_code == 200
        data = response.json()
        assert data["sent"] == 1
    
    def test_notification_with_special_characters(self, client: TestClient):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏."""
        notification_data = {
            "text": "Test notification with special chars: !@#$%^&*()_+-=[]{}|;':\",./<>?",
            "comment": "Test comment with special chars: !@#$%^&*()_+-=[]{}|;':\",./<>?",
            "user_ids": [123456789]
        }
        
        response = client.post("/api/notifications/send", json=notification_data)
        assert response.status_code == 200
        data = response.json()
        assert data["sent"] == 1
    
    def test_notification_with_unicode(self, client: TestClient):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å Unicode —Å–∏–º–≤–æ–ª–∞–º–∏."""
        notification_data = {
            "text": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏: –ø—Ä–∏–≤–µ—Ç –º–∏—Ä! üåç",
            "comment": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —ç–º–æ–¥–∑–∏: üöÄ",
            "user_ids": [123456789]
        }
        
        response = client.post("/api/notifications/send", json=notification_data)
        assert response.status_code == 200
        data = response.json()
        assert data["sent"] == 1
    
    def test_get_notifications_list_endpoint(self, client: TestClient):
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        response = client.get("/api/notifications")
        assert response.status_code == 200
        
        data = response.json()
        assert isinstance(data, list)
    
    def test_get_notification_by_id(self, client: TestClient):
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ ID."""
        response = client.get("/api/notifications/1")
        assert response.status_code == 200
        data = response.json()
        assert data["id"] == 1
        assert "text" in data
    
    def test_get_users_list_endpoint(self, client: TestClient):
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
        response = client.get("/api/users")
        assert response.status_code == 200
        
        data = response.json()
        assert isinstance(data, list)
    
    def test_get_user_by_id(self, client: TestClient):
        """–¢–µ—Å—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID."""
        response = client.get("/api/users/123456789")
        assert response.status_code == 200
        data = response.json()
        assert data["id"] == 123456789
        assert "username" in data
    
    def test_invalid_endpoint(self, client: TestClient):
        """–¢–µ—Å—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞."""
        response = client.get("/api/invalid/endpoint")
        assert response.status_code == 404
    
    def test_invalid_method(self, client: TestClient):
        """–¢–µ—Å—Ç –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ HTTP –º–µ—Ç–æ–¥–∞."""
        response = client.put("/api/notifications/send")
        assert response.status_code == 405  # Method Not Allowed 